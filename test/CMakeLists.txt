set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/install CACHE PATH "" FORCE)

function(insert_element key value)
    set(MAP_KEYS ${MAP_KEYS} ${key} PARENT_SCOPE)
    set(MAP_VALUES ${MAP_VALUES} ${value} PARENT_SCOPE)
endfunction()

insert_element(" " "global_namespace_struct a_struct")
insert_element("test" "a_struct a_class an_abstract_class public_derived protected_derived private_derived")
insert_element("test::inner" "a_struct")

set(MAIN_MODULE_NAME cppy_test)

install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${MAIN_MODULE_NAME} DESTINATION . FILES_MATCHING PATTERN "__init__.py")
install(FILES cppy_test.py DESTINATION .)

list(LENGTH MAP_KEYS LENGTH)
foreach(i RANGE 1 ${LENGTH})
    math(EXPR i "${i} - 1")

    list(GET MAP_KEYS ${i} SCOPE)
    string(STRIP ${SCOPE} SCOPE)
    if(SCOPE)
        string(REPLACE "::" "/" SCOPE_PATH ${SCOPE})
        set(SCOPE_PATH "${SCOPE_PATH}/")
        set(SCOPE_ARG --scope ${SCOPE})
        set(GENERATED_SOURCES "${MAIN_MODULE_NAME}/${SCOPE_PATH}/module.cpp")
        string(FIND ${SCOPE} "::" INNER_SCOPE REVERSE)
        if(INNER_SCOPE EQUAL -1)
            set(MODULE_NAME "_${SCOPE}")
        else()
            math(EXPR INNER_SCOPE "${INNER_SCOPE} + 2")
            string(SUBSTRING ${SCOPE} ${INNER_SCOPE} -1 MODULE_NAME)
            set(MODULE_NAME "_${MODULE_NAME}")
        endif()
    else()
        set(SCOPE_PATH "")
        set(SCOPE_ARG "")
        set(GENERATED_SOURCES "${MAIN_MODULE_NAME}/module.cpp")
        set(MODULE_NAME "_${MAIN_MODULE_NAME}")
    endif()

    list(GET MAP_VALUES ${i} CLASSES)
    string(REPLACE " " ";" CLASSES ${CLASSES})
    foreach(class ${CLASSES})
        string(TOLOWER ${class} class)
        list(APPEND GENERATED_SOURCES ${MAIN_MODULE_NAME}/${SCOPE_PATH}${class}.cpp)
        list(APPEND EXPORTS "export_${class}()")
    endforeach()

    add_custom_command(OUTPUT ${GENERATED_SOURCES} COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/cppy.py
        --clang ${HAVE_LIBCLANG} -f ${CMAKE_CURRENT_SOURCE_DIR}/cppy_test.hpp -m ${MAIN_MODULE_NAME} ${SCOPE_ARG}
        ${CLASSES} VERBATIM)
    add_library(${MODULE_NAME} MODULE ${GENERATED_SOURCES})
    set_property(TARGET ${MODULE_NAME} PROPERTY PREFIX "")
    set_property(TARGET ${MODULE_NAME} APPEND PROPERTY INCLUDE_DIRECTORIES ${PYTHON_INCLUDE_DIRS}
        ${Boost_INCLUDE_DIRS})
    target_link_libraries(${MODULE_NAME} ${Boost_PYTHON_LIBRARY} ${PYTHON_LIBRARIES})
    install(TARGETS ${MODULE_NAME} DESTINATION ${MAIN_MODULE_NAME}/${SCOPE_PATH})
endforeach()
